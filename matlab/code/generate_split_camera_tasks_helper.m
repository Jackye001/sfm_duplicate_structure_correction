function [split_camera_tasks] = generate_split_camera_tasks_helper(...
    camera_pairs, group_assignments, group_sizes, group_idx1, group_idx2,...
    baseline_angles, max_split_cameras_per_edge)

camera_pair_indices = find_split_cameras(camera_pairs,...
    group_assignments, group_sizes, group_idx1, group_idx2);

num_split_pairs = length(camera_pair_indices);

if num_split_pairs == 0
    split_camera_tasks = struct(...
        'camera_pairs', [],...
        'group_assignments', group_assignments,...
        'group_sizes', group_sizes,...
        'group_idx1', group_idx1,...
        'group_idx2', group_idx2);
    return
end

if num_split_pairs > max_split_cameras_per_edge
    baseline_angles = baseline_angles(camera_pair_indices);
    [~, indices] = sort(baseline_angles, 'ascend');
    indices = indices(1:max_split_cameras_per_edge);
    camera_pair_indices = camera_pair_indices(indices);
end

camera_pairs = camera_pairs(camera_pair_indices, :);

split_camera_tasks = struct(...
    'camera_pairs', camera_pairs,...
    'group_assignments', group_assignments,...
    'group_sizes', group_sizes,...
    'group_idx1', group_idx1,...
    'group_idx2', group_idx2);

end % function
